[{"title":"《深入浅出Node.js》-1简介","url":"/2024/03/06/Nodejs/1/","content":"\n#### 1、诞生\n- 2009年3月，Ryan Dahl在其博客上宣布准备基于V8创建一个轻量级的Web服务器并提供一套库。\n- 2009年5月，Ryan Dahl在GitHub上发布了最初的版本。\n\n\n#### 2、由来及发展\n- 为基于事件驱动、非阻塞I/O的Web服务器\n- node而生\n- 但是项目的发展超过了他最初单纯开发一个Web服务器的想法\n- 变成了构建网络应用的一个基础框架\n- 包含：服务器、客户端、命令行工具\n- 最终：\n  - 为一个强制不共享任何资源的单线程、单进程系统，\n  - 包含十分适宜网络的库，\n  - 为构建大型分布式应用程序提供基础设施\n\n\n#### 3、node 诞生意义\n- 浏览器中局限\n  - h5和js的能力\n  - 来于webkit 和 v8\n  - 取决于浏览器中间层提供的支持有多少\n  - 长久以来却限制在浏览器的沙箱中运行\n- Nodejs 与 浏览器 对比\n  - 都是基于事件驱动的异步架构\n  - 浏览器\n    - 通过事件驱动来服务界面上的交互，\n  - Node\n    - 通过事件驱动来服务I/O\n    - 并且功能得到拓展：随心所欲地访问本地文件，可以搭建WebSocket服务器端，可以连接数据库\n  - Node不处理UI，但用与浏览器相同的机制和原理运行\n  - 也有对两者同时运用的尝试\n    - 出现node-webkit这样的项目（2012年）\n      - Node中的事件循环和WebKit的事件循环融合在一起，\n      - 既可以通过它享受HTML、CSS带来的UI构建，\n      - 也能通过它访问本地资源，将两者的优势整合到一起\n    - github未找到项目（2024年），可能已经过时\n    - 像后来的nuxt是对此一种延续（我的理解）\n![img](https://res.weread.qq.com/wrepub/epub_26211935_3)\n\n\n#### 4、Node特点\n- 特点1：异步I/O\n  - 以读取文件为例，我们可以看到它与前端Ajax调用的方式是极其类似的\n  ```js\n    var fs = require('fs');\n    fs.readFile('/path', function (err, file) {\n      console.log(’读取文件完成’)\n    });\n    console.log(’发起读取文件’);\n  ```\n  - 在Node中，绝大多数的操作都以异步的方式进行调用。\n  - Ryan Dahl排除万难，在底层构建了很多异步I/O的API：例如文件读取、网络请求等\n  - 从语言层面很自然地进行并行I/O操作\n- 特点2：事件\n  - 将前端浏览器中应用广泛且成熟的事件引入后端，配合异步I/O，将事件点暴露给业务逻辑。\n  - 为其绑定了request事件，对于请求对象，我们为其绑定了data事件和end事件\n    ```js\n        var http = require('http');\n        // 侦听服务器的request事件\n        http.createServer(function (req, res) {\n          var postData = '';\n          req.setEncoding('utf8');\n          // 侦听请求的data事件\n          req.on('data', function (chunk) {\n            postData += chunk;\n          });\n          // 侦听请求的end事件\n          req.on('end', function () {\n            res.end(postData);\n          });\n        }).listen(8080);\n        console.log(’服务器启动完成’);\n    ```\n  - 事件编程特点：轻量级、松耦合、只关注事务点等优势\n  - 问题：事件与事件之间各自独立，如何协作是一个问题。\n- 特点3：回调函数\n  - 回调函数无处不在\n  - 回调函数也是最好的接受异步调用返回数据的方式。\n- 特点4：单线程\n  - Node保持了JavaScript在浏览器中单线程的特点\n  - 优点：\n    - 避免了多线程问题\n    - 多线程编程那样处处在意状态的同步问题\n    - 这里没有死锁的存在，\n    - 也没有线程上下文交换所带来的性能上的开销\n  - 不足：\n    - 无法利用多核CPU\n    - 错误会引起整个应用退出，应用的健壮性值得考验\n    - 大量计算占用CPU导致无法继续调用异步I/O\n  - 解决不足：\n    - Node采用了与Web Workers相同的思路\n    - 来解决单线程中大计算量的问题：child_process\n      - 从容地应对单线程在健壮性和无法利用多核CPU方面的问题。\n      - 将计算分发到各个子进程，\n      - 可以将大量计算分解掉，\n      - 然后再通过进程之间的事件消息来传递结果，\n      - 这可以很好地保持应用模型的简单和低依赖\n- 特点5：跨平台\n  - Node基于libuv实现跨平台的架构示意图\n  - 兼容Windows和*nix平台主要得益于Node在架构层面的改动\n  - 它在操作系统与Node上层模块系统之间构建了一层平台层架构，即libuv。\n  - 目前，libuv已经成为许多系统实现跨平台的基础组件\n  - Node的第三方C++模块也可以借助libuv实现跨平台。\n  \n\n#### 5、应用场景\n-  1、I/O密集型\n   -  Node面向网络且擅长并行I/O，能够有效地组织起更多的硬件资源\n   -  主要在于Node利用事件循环的处理能力\n-  2、CPU密集型业务\n   -  收否胜任？\n   -  V8的执行效率非常高，和其他语言相比速度也非常快\n   -  主要挑战是：js单线程，如果长时间运行计算，使得后续I/O无法发起\n   -  解决方法：\n      -  调整、分解大型运算任务为多个小任务，\n      -  运算适时释放，\n      -  不阻塞I/O调用发起\n      -  对于一个纯计算的场景，或许根本没有I/O，改用多线程\n      -  Node没有多线程，如何解决？\n         -  Node可以通过编写C/C++扩展的方式更高效地利用CPU\n         -  子进程处理\n      -  CPU密集不可怕，如何合理调度是诀窍\n-  3、遗留系统处理\n   -  对待原来的旧系统，譬如java/jsp\n   -  旧有的系统具有非常稳定的数据输出，持续为传统网站服务，\n   -  同时为移动版提供数据源，Node将该数据源当做数据接口，发挥异步并行的优势\n   -  旧系统只做接口和中间件\n-  4、分布式应用\n   -  并行地去多台数据库中获取数据并合并\n   -  NodeFox能实现对多台MySQL数据库的查询，如同查询一台MySQL一样，\n   -  而ITier更强大，查询多个数据库（不同的数据库）如同查询单个数据库一样\n   -  Node高效利用并行I/O的过程，也是高效使用数据库的过程、\n","tags":["server","Nodejs"]}]